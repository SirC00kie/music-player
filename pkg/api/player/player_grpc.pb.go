// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package player

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlayerServiceClient is the client API for PlayerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayerServiceClient interface {
	NextSong(ctx context.Context, in *NextSongRequest, opts ...grpc.CallOption) (*NextSongResponse, error)
	PrevSong(ctx context.Context, in *PrevSongRequest, opts ...grpc.CallOption) (*PrevSongResponse, error)
	PlaySong(ctx context.Context, in *PlaySongRequest, opts ...grpc.CallOption) (*PlaySongResponse, error)
	PauseSong(ctx context.Context, in *PauseSongRequest, opts ...grpc.CallOption) (*PauseSongResponse, error)
}

type playerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerServiceClient(cc grpc.ClientConnInterface) PlayerServiceClient {
	return &playerServiceClient{cc}
}

func (c *playerServiceClient) NextSong(ctx context.Context, in *NextSongRequest, opts ...grpc.CallOption) (*NextSongResponse, error) {
	out := new(NextSongResponse)
	err := c.cc.Invoke(ctx, "/api.PlayerService/NextSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) PrevSong(ctx context.Context, in *PrevSongRequest, opts ...grpc.CallOption) (*PrevSongResponse, error) {
	out := new(PrevSongResponse)
	err := c.cc.Invoke(ctx, "/api.PlayerService/PrevSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) PlaySong(ctx context.Context, in *PlaySongRequest, opts ...grpc.CallOption) (*PlaySongResponse, error) {
	out := new(PlaySongResponse)
	err := c.cc.Invoke(ctx, "/api.PlayerService/PlaySong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) PauseSong(ctx context.Context, in *PauseSongRequest, opts ...grpc.CallOption) (*PauseSongResponse, error) {
	out := new(PauseSongResponse)
	err := c.cc.Invoke(ctx, "/api.PlayerService/PauseSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerServiceServer is the server API for PlayerService service.
// All implementations should embed UnimplementedPlayerServiceServer
// for forward compatibility
type PlayerServiceServer interface {
	NextSong(context.Context, *NextSongRequest) (*NextSongResponse, error)
	PrevSong(context.Context, *PrevSongRequest) (*PrevSongResponse, error)
	PlaySong(context.Context, *PlaySongRequest) (*PlaySongResponse, error)
	PauseSong(context.Context, *PauseSongRequest) (*PauseSongResponse, error)
}

// UnimplementedPlayerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPlayerServiceServer struct {
}

func (UnimplementedPlayerServiceServer) NextSong(context.Context, *NextSongRequest) (*NextSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextSong not implemented")
}
func (UnimplementedPlayerServiceServer) PrevSong(context.Context, *PrevSongRequest) (*PrevSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrevSong not implemented")
}
func (UnimplementedPlayerServiceServer) PlaySong(context.Context, *PlaySongRequest) (*PlaySongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaySong not implemented")
}
func (UnimplementedPlayerServiceServer) PauseSong(context.Context, *PauseSongRequest) (*PauseSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseSong not implemented")
}

// UnsafePlayerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerServiceServer will
// result in compilation errors.
type UnsafePlayerServiceServer interface {
	mustEmbedUnimplementedPlayerServiceServer()
}

func RegisterPlayerServiceServer(s grpc.ServiceRegistrar, srv PlayerServiceServer) {
	s.RegisterService(&PlayerService_ServiceDesc, srv)
}

func _PlayerService_NextSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).NextSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PlayerService/NextSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).NextSong(ctx, req.(*NextSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_PrevSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrevSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).PrevSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PlayerService/PrevSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).PrevSong(ctx, req.(*PrevSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_PlaySong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaySongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).PlaySong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PlayerService/PlaySong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).PlaySong(ctx, req.(*PlaySongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_PauseSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).PauseSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PlayerService/PauseSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).PauseSong(ctx, req.(*PauseSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayerService_ServiceDesc is the grpc.ServiceDesc for PlayerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.PlayerService",
	HandlerType: (*PlayerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NextSong",
			Handler:    _PlayerService_NextSong_Handler,
		},
		{
			MethodName: "PrevSong",
			Handler:    _PlayerService_PrevSong_Handler,
		},
		{
			MethodName: "PlaySong",
			Handler:    _PlayerService_PlaySong_Handler,
		},
		{
			MethodName: "PauseSong",
			Handler:    _PlayerService_PauseSong_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "player.proto",
}
